// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    String urlStr = "http://mvn.mob.com/android"
    if (hasProperty("mavenUrl")) {
        urlStr = getProperty("mavenUrl")
    }
    println "mavenUrl: ${urlStr}, ${hasProperty("mavenUrl")}"
    ext {
        mavenUrl = urlStr
    }

    repositories {
        jcenter()

        maven {
            url = mavenUrl
        }



        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }


        //maven { url "https://maven.google.com" }
        google()

        //====================== snapchat ======================
        maven {
            url "https://storage.googleapis.com/snap-kit-build/maven"
        }
        //====================== snapchat ======================

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath 'com.mob.sdk:MobSDK:+'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
        //exclude group: 'com.mob', module: 'MobLink-3.0.2'
        //resolutionStrategy.force 'com.mob:MobCommons:2020.0915.1032'
    }
}

allprojects {
    repositories {
        maven {
            name 'Google'
            url "https://maven.google.com"
        }
        jcenter()
        maven {
//            url "http://mvn.mob.com/android"
            url mavenUrl
        }


        google()


        //====================== snapchat ======================
        maven {
            url "https://storage.googleapis.com/snap-kit-build/maven"
        }
        //====================== snapchat ======================

    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
        //exclude group: 'com.mob', module: 'MobLink-3.0.2'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

String findBuildTools() {
    def localProperties = new File(project.rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr->properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        def buildTools = new File(sdkDir, "build-tools")
        if (buildTools.exists()) {
            def tools = buildTools.list()
            if (tools != null) {
                Arrays.sort(tools)
                return tools[tools.length - 1]
            }
        }
    }
    return null
}

